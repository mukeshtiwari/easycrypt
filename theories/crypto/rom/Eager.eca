(* --------------------------------------------------------------------
 * Copyright (c) - 2012--2016 - IMDEA Software Institute
 * Copyright (c) - 2012--2018 - Inria
 * Copyright (c) - 2012--2018 - Ecole Polytechnique
 *
 * Distributed under the terms of the CeCILL-B-V1 license
 * -------------------------------------------------------------------- *)

require import AllCore Distr List SmtMap.
require (*--*) FinType NewROM.

clone include NewROM.
clone include FinType with
  type t <- from.

module RO: Oracle = {
  var m:(from,to) fmap

  proc init(): unit = {
    var y : to;
    var work : from list;
    var f : from;

    m = empty;
    work = enum;
    while (work <> []) {
      f = head witness work;
      y = $dsample f;
      m.[f] = y;
      work = behead work;
    }
  }

  proc o(x:from): to = {
    return oget m.[x];
  }
}.

hoare RO_init_full: RO.init: true ==> forall x, x \in RO.m.
proof.
proc.
while (forall x, mem work x \/ x \in RO.m).
+ auto; progress.
  rewrite mem_set; case: (H x)=> [| -> //=].
  by rewrite -(mem_head_behead witness)// => -[-> | ->].
by auto=> /> x; rewrite enumP.
qed.

lemma RO_init_ll:
  (forall x, mu (dsample x) predT = 1%r) =>
  islossless RO.init.
proof.
move=> dsampleL; proc.
while (true) (size work); auto; smt (head_behead size_eq0 size_ge0).
qed.

lemma RO_o_ll: islossless RO.o.
proof. by proc; wp. qed.

equiv RO_init_eq: RO.init ~ RO.init: true ==> ={glob RO}.
proof. by proc; while (={glob RO, work}); auto. qed.

equiv RO_o_eq: RO.o ~ RO.o: ={glob RO, x} ==> ={glob RO, res}
by sim.

hoare dom_RO_init x: RO.init: true ==> x \in RO.m.
proof. by conseq RO_init_full=> //= m ->. qed.
