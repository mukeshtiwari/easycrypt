(* --------------------------------------------------------------------
 * Copyright (c) - 2012--2016 - IMDEA Software Institute
 * Copyright (c) - 2012--2018 - Inria
 * Copyright (c) - 2012--2018 - Ecole Polytechnique
 *
 * Distributed under the terms of the CeCILL-B-V1 license
 * -------------------------------------------------------------------- *)

require import AllCore Distr SmtMap.
require (*--*) NewROM.

clone include NewROM.

module RO:Oracle = {
  var m:(from, to) fmap

  proc init():unit = {
    m = empty;
  }

  proc o(x:from):to = {
    var y;

    y = $dsample x;
    if (x \notin m) m.[x] = y;
    return oget (m.[x]);
  }
}.

lemma RO_init_ll: islossless RO.init.
proof. by proc; wp. qed.

lemma RO_o_ll:
  (forall x, is_lossless (dsample x)) =>
  islossless RO.o.
proof. by move=> dsampleL; proc; auto=> /#. qed.

equiv RO_init_eq: RO.init ~ RO.init: true ==> ={glob RO}
by sim.

equiv RO_o_eq: RO.o ~ RO.o: ={glob RO, x} ==> ={glob RO, res}
by sim.

hoare dom_RO_o d x': RO.o:
  x = x' /\ (forall x, x \in RO.m = d x) ==> dom RO.m = predU d (pred1 x').
proof.
proc; auto=> /> &m eq_m_d y _; rewrite !fun_ext; split.
+ by move=> _ x0; rewrite mem_set /predU /pred1 eq_m_d.
by move=> + x0; rewrite /predU /pred1 !eq_m_d; case: (x0 = x{m})=> //= ->> ->.
qed.
