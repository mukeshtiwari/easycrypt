(* --------------------------------------------------------------------
 * Copyright (c) - 2012--2016 - IMDEA Software Institute
 * Copyright (c) - 2012--2018 - Inria
 * Copyright (c) - 2012--2018 - Ecole Polytechnique
 *
 * Distributed under the terms of the CeCILL-B-V1 license
 * -------------------------------------------------------------------- *)

require import AllCore Distr List SmtMap.
require (*--*) FinType Eager Lazy.

clone include NewROM.

clone export Lazy as LazyRO with
  type from <- from,
  type to <- to,
  op dsample <- dsample.

(* This hides a finiteness condition *)
clone export Eager as EagerRO with
  type from <- from,
  type to <- to,
  op dsample <- dsample.

section.
  declare module D:Dist {LazyRO.RO,EagerRO.RO}.

  local module IND_Lazy = {
    module H:Oracle = {
      var m:(from, to) fmap

      proc init():unit = {
        m = empty;
      }

      proc o(x:from):to = {
        var y;

        y = $dsample x;
        if (x \notin m) m.[x] = y;
        return oget (m.[x]);
      }
    }

    proc resample(): unit = {
      var work, f, y;
      var y0 : to; (* for the proof *)

      work = enum;
      while (work <> [])
      {
        f = head witness work;
        y = $dsample f;
        if (f \notin H.m) H.m.[f] = y;
        work = behead work;
      }
    }

    module D = D(H)

    proc main(): bool = {
      var b;

      H.init();
      b = D.distinguish();
      resample();
      return b;
    }
  }.

  local lemma IND_Lazy:
    (forall x, mu (dsample x) predT = 1%r) =>
    equiv [IND(LazyRO.RO,D).main ~ IND_Lazy.main: ={glob D} ==> ={res}].
  proof.
    move=> dsampleL; proc; seq 2 2: (={b}).
      call (_: LazyRO.RO.m{1} = IND_Lazy.H.m{2}); first by sim.
      by call (_: ={glob D} ==> LazyRO.RO.m{1} = IND_Lazy.H.m{2});
        first by proc; wp.
    inline IND_Lazy.resample.
    while{2} (true) (size work{2});auto; smt (head_behead size_eq0 size_ge0).
  qed.

  local module IND_Eager = {
    module H = {
      var m:(from,to) fmap

      proc o(x:from): to = {
        return oget (m.[x]);
      }
    }

    proc resample(): unit = {
      var work, f, y;
      var y0 : to; (* for the proof *)

      work = enum;
      while (work <> [])
      {
        f = head witness work;
        y = $dsample f;
        if (f \notin H.m) H.m.[f] = y;
        work = behead work;
      }
    }

    module D = D(H)

    proc main(): bool = {
      var b;

      H.m = empty;
      resample();
      b = D.distinguish();

      return b;
    }
  }.

  local lemma eager_query:
    (forall x, mu (dsample x) predT = 1%r) =>
    eager [IND_Eager.resample(); ,
               IND_Eager.H.o ~ IND_Lazy.H.o,
           IND_Lazy.resample();:
      ={x} /\ IND_Eager.H.m{1} = IND_Lazy.H.m{2} ==>
      ={res} /\ IND_Eager.H.m{1} = IND_Lazy.H.m{2}].
  proof.
    move=> dsampleL; eager proc.
    inline IND_Eager.resample IND_Lazy.resample; swap{2} 4 -3.
    seq 1 1: (={x,work} /\
              IND_Eager.H.m{1} = IND_Lazy.H.m{2} /\
              mem work{1} x{1}).
      by auto; progress; apply enumP.
    case (x{2} \notin IND_Lazy.H.m{2}); [rcondt{2} 2; first by auto |
                                         rcondf{2} 2; first by auto].
      transitivity{1} {y0 = $dsample x;
                       while (work <> []) {
                         f = head witness work;
                         y = $dsample f;
                         if (f \notin IND_Eager.H.m)
                           IND_Eager.H.m.[f] = if f = x then y0 else y;
                         work = behead work;
                       }
                       result = oget IND_Eager.H.m.[x]; }
                       (={x,work,IND_Eager.H.m} ==> ={result,IND_Eager.H.m})
                       ((={x,work} /\
                        IND_Eager.H.m{1} = IND_Lazy.H.m{2} /\
                        mem work{1} x{1}) /\
                        x{2} \notin IND_Lazy.H.m{2} ==>
                        ={result} /\ IND_Eager.H.m{1} = IND_Lazy.H.m{2}) => //.
        by move=> &1 &2 H; exists IND_Lazy.H.m{2} work{2} x{2}; move: H.
      transitivity{1} {while (work <> []) {
                         f = head witness work;
                         y = $dsample f;
                         if (f \notin IND_Eager.H.m)
                           IND_Eager.H.m.[f] = y;
                         work = behead work;
                       }
                       y0 = $dsample x;
                       result = oget IND_Eager.H.m.[x]; }
                       (={x,work,IND_Eager.H.m} ==> ={result,IND_Eager.H.m})
                       (={x,work,IND_Eager.H.m} ==> ={result,IND_Eager.H.m})=> //.
        by move=> &1 &2 H; exists IND_Eager.H.m{2} work{2} x{2}; move: H.
      by sim; rnd{2}; sim :(={x,IND_Eager.H.m}); progress; apply dsampleL.

      wp; symmetry.
      eager while (H:y0 = $dsample x; ~ y0 = $dsample x; : ={x} ==> ={y0})=> //; first by rnd.
        swap{2} 5 -4; swap [2..3] -1; case ((x = head witness work){1}).
          wp; rnd{2}; rnd; rnd{1}; auto; progress=> //=.
          by apply dsampleL.
          by auto; progress; rewrite (eq_sym _ x{1}) H1.
        by sim.

      wp; while (={x, work} /\
                 (!mem work x => x \in IND_Eager.H.m){1} /\
                 IND_Lazy.H.m.[x]{2} = Some y0{1} /\
                 if (x \in IND_Eager.H.m){1}
                 then IND_Eager.H.m{1} = IND_Lazy.H.m{2}
                 else eq_except (pred1 x{1}) IND_Eager.H.m{1} IND_Lazy.H.m{2}).
        auto;progress;expect 12; last  first.
        + smt(mem_head_behead).
        + smt(mem_set).
        + smt(get_setE domE).
        + smt(get_setE domE eq_exceptP).
        + smt(mem_set eq_except_set eq_exceptP).
        + smt(mem_head_behead).
        + smt(get_setE domE).
        + smt().
        + smt(domE eq_exceptP).
        + smt(mem_set).
        + apply fmap_eqP; smt(eq_exceptP get_setE mem_set).
        smt(mem_set domE eq_exceptP).
      by auto=> />; smt(eq_exceptmS get_setE).

    wp; while (={x,work} /\
               IND_Eager.H.m{1} = IND_Lazy.H.m{2} /\
               x{2} \in IND_Lazy.H.m{2} /\
               oget IND_Eager.H.m.[x]{1} = result{2}).
       auto; smt(get_setE mem_set). 
    by auto; smt().
  qed.

  local lemma eager_aux:
    (forall x, mu (dsample x) predT = 1%r) =>
    equiv [IND_Lazy.main ~ IND_Eager.main: ={glob D} ==> ={res}].
  proof.
    move=> dsampleL; proc; inline IND_Lazy.H.init.
    seq 1 1: (={glob D} /\ IND_Lazy.H.m{1} = IND_Eager.H.m{2}); first by wp.
    symmetry.
    eager (H: IND_Eager.resample(); ~ IND_Lazy.resample();:
                IND_Eager.H.m{1} = IND_Lazy.H.m{2} ==> IND_Eager.H.m{1} = IND_Lazy.H.m{2}):
          (={glob D} /\ IND_Eager.H.m{1} = IND_Lazy.H.m{2}) => //;
      first by sim.
    eager proc H (IND_Eager.H.m{1} = IND_Lazy.H.m{2})=> //;
      first by apply eager_query.
    by sim.
  qed.

  local lemma IND_Eager:
    (forall x, mu (dsample x) predT = 1%r) =>
    equiv [IND_Eager.main ~ IND(EagerRO.RO,D).main: ={glob D} ==> ={res}].
  proof.
    move=> dsampleL; proc.
    call (_: (forall x, x \in IND_Eager.H.m{1}) /\ IND_Eager.H.m{1} = EagerRO.RO.m{2});
      first by proc; skip; smt.
    inline RO.init IND_Eager.resample.
    while (={work} /\
           uniq work{2} /\
           (forall x, x \in IND_Eager.H.m{1} <=> !mem work{1} x) /\
           IND_Eager.H.m{1} = EagerRO.RO.m{2}).
      rcondt{1} 3; 1: by auto=> />; smt w=mem_head_behead.
      auto=> /> &2; case: (work{2}) => //= l w [xNw ->] /= h y _.
      by move=> x; rewrite mem_set h; case: (x = l).
    auto;smt (enum_uniq mem_empty enumP).
  qed.

  lemma eagerRO:
    (forall x, mu (dsample x) predT = 1%r) =>
    equiv [IND(LazyRO.RO,D).main ~ IND(EagerRO.RO,D).main: ={glob D} ==> ={res}].
  proof.
    move=> dsampleL; bypr (res{1}) (res{2})=> // &1 &2 a eq_D.
    apply (eq_trans _ Pr[IND_Lazy.main() @ &1: a = res]);
      first by byequiv (IND_Lazy _).
    apply (eq_trans _ Pr[IND_Eager.main() @ &1: a = res]);
      first by byequiv (eager_aux _).
    by byequiv (IND_Eager _).
  qed.
end section.
