(* --------------------------------------------------------------------
 * Copyright (c) - 2012--2016 - IMDEA Software Institute
 * Copyright (c) - 2012--2018 - Inria
 * Copyright (c) - 2012--2018 - Ecole Polytechnique
 *
 * Distributed under the terms of the CeCILL-B-V1 license
 * -------------------------------------------------------------------- *)

require import Distr.

(* Input and output types *)
type from, to.

(* A distribution to use on the target type; it can be parameterized by the input *)
op dsample: from -> to distr.

(* A signature for random oracles from "from" to "to". *)
module type Oracle = {
  proc init()    : unit
  proc o (x:from): to
}.

(* Adversaries/Consumer constructions can only query o. *)
module type ARO = { proc o(x:from): to }.

(* A RO-Distinguisher is a single algorithm that has access to an
   oracle o and returns a boolean *)
module type Dist (H:ARO) = { proc distinguish(): bool }.

(* H <: Oracle and G <: Oracle are said to be
   (computationally/statistically) indistinguishable if, for any
   D <:  Dist, the distributions "IND(H,D).main" and "IND(G,D).main" are
   (computationally/statistically) close. *)
module IND(H:Oracle,D:Dist) = { module D = D(H)

  proc main(): bool = {
    var b:bool;

    H.init();
    b = D.distinguish();
    return b;
  }
}.
